# Rule intent
# a) Match AWS::EC2::SecurityGroup resourceType
#
# Expectations:
# 1) PASS when there are AWS::EC2::SecurityGroup resources
# 2) FAIL otherwise                                                                          
#

rule check_resource_type_and_status {
    resourceType == /AWS::EC2::SecurityGroup/
}

# Rule intent
# a) SecurityGroup should not have an ingress rule for 0.0.0.0/0
#
# Expectations:
# 1) SKIP when there are no AWS::EC2::SecurityGroup resources
# 2) PASS when there no cidrIp ingress entries to 0.0.0.0/0                                                                               
# 3) FAIL otherwise
#

rule check_no_access_ingress_any when check_resource_type_and_status {
    # 
    # select all cidrIp entries that point to '0.0.0.0/0'
    #
    let any_ip_permissions = configuration.ipPermissions[
        #
        # if either ipv4 or ipv6 that allows access from any address
        #
        some ipv4Ranges[*].cidrIp == '0.0.0.0/0' or
        some ipv6Ranges[*].cidrIpv6 == '::/0']
    
    %any_ip_permissions empty
}

# Rule intent
# a) SecurityGroup should not have an egress rule for 0.0.0.0/0
#
# Expectations:
# 1) SKIP when there are no AWS::EC2::SecurityGroup resources
# 2) PASS when there no cidrIp egress entries to 0.0.0.0/0                                                                               
# 3) FAIL otherwise
#

rule check_no_access_egress_any when check_resource_type_and_status {
    # 
    # select all cidrIp entries that point to '0.0.0.0/0'
    #
    let any_ip_permissions = configuration.ipPermissionsEgress[
        #
        # if either ipv4 or ipv6 that allows access from any address
        #
        some ipv4Ranges[*].cidrIp == '0.0.0.0/0' or
        some ipv6Ranges[*].cidrIpv6 == '::/0']
    
    %any_ip_permissions empty
}

# Rule intent
# a) SecurityGroup should not have ingress management ports rule for 0.0.0.0/0
#
# Expectations:
# 1) SKIP when there are no AWS::EC2::SecurityGroup resources
# 2) PASS when there no management ports ingress entries to 0.0.0.0/0                                                                               
# 3) FAIL otherwise
#

rule check_no_access_ingress_any_mgmt_port when check_resource_type_and_status {

    let management_ports = [22, 3389]

    # 
    # select all ipPermission instances that can be reached by ANY IP address
    # IPv4 or IPv6 and not UDP
    #
    let any_ip_permissions = configuration.ipPermissions[
        #
        # if either ipv4 or ipv6 that allows access from any address
        #
        some ipv4Ranges[*].cidrIp == '0.0.0.0/0' or
        some ipv6Ranges[*].cidrIpv6 == '::/0'

        #
        # the ipProtocol is not UDP
        #
        ipProtocol != 'udp' ]
        
    when %any_ip_permissions !empty
    {
        %any_ip_permissions {
            ipProtocol != '-1'
            when fromPort exists 
                 toPort exists 
            {
                let each_any_ip_perm = this
                %management_ports {
                    this != %each_any_ip_perm.fromPort or
                    this != %each_any_ip_perm.toPort
                }
            }
        }       
    }   
}

# Rule intent
# a) SecurityGroup should not have ingress management ports rule for 0.0.0.0/0 for restricted VPCs
#
# Expectations:
# 1) SKIP when there are no AWS::EC2::SecurityGroup resources                                                                             
# 2) PASS when there no management ports ingress entries to 0.0.0.0/0 for none restricted VPCs
# 3) FAIL otherwise
#

rule check_no_access_ingress_any_mgmt_port_restricted_vpcs when check_resource_type_and_status {

    let management_ports = [22, 3389]
    let restricted_vpcs = ['vpc-0cbee09e78864b987']

    # 
    # select only restricted VPCs
    #
    let any_restricted_vpc = configuration[
        vpcId IN %restricted_vpcs]
    
    when %any_restricted_vpc !empty
    {
        # 
        # select all ipPermission instances that can be reached by ANY IP address
        # IPv4 or IPv6 and not UDP
        #
        let any_ip_permissions = configuration.ipPermissions[
            #
            # if either ipv4 or ipv6 that allows access from any address
            #
            some ipv4Ranges[*].cidrIp == '0.0.0.0/0' or
            some ipv6Ranges[*].cidrIpv6 == '::/0'

            #
            # the ipProtocol is not UDP
            #
            ipProtocol != 'udp' ]
            
        when %any_ip_permissions !empty
        {
            %any_ip_permissions {
                ipPermissions.ipProtocol != '-1'
                when ipPermissions.fromPort exists 
                    ipPermissions.toPort exists 
                {
                    let each_any_ip_perm = this
                    %management_ports {
                        this != %each_any_ip_perm.ipPermissions.fromPort or
                        this != %each_any_ip_perm.ipPermissions.toPort
                    }
                }
            }       
        }  
    } 
}