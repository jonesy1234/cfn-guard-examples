# Rule intent
# a) Match AWS::EC2::RouteTable resourceType
#
# Expectations:
# 1) FAIL when there are no AWS::EC2::RouteTable resources
# 2) FAIL otherwise                                                                          
#

rule check_resource_type_and_status {
    resourceType == /AWS::EC2::RouteTable/
}

#
# Rule intent
# a) RouteTable should not have a route to the Internet 
#
# Expectations:
# 1) SKIP when there are no AWS::EC2::RouteTable resources
# 2) PASS when the is no route with destinationCidrBlock set to '0.0.0.0/0'     
# 3) FAIL otherwise                                                                                   
#

rule check_no_route_to_internet when check_resource_type_and_status {
    # 
    # select all destinationCidrBlock entries that point to '0.0.0.0/0'
    #
    let any_catchall_routes = configuration.routes[
        some destinationCidrBlock == "0.0.0.0/0"]

    %any_catchall_routes empty 
}

#
# Rule intent
# a) RouteTable should have an approved route to the Internet 
#
# Expectations:
# 1) SKIP when there are no AWS::EC2::RouteTable resources
# 2) PASS when the destinationCidrBlock set to '0.0.0.0/0' using an approved igw
# 3) FAIL otherwise
#

rule check_approved_route_to_internet when check_resource_type_and_status {
    #
    # list of approved Internet Gateway Ids
    #
    let authorised_igw = ['igw-a5f227c1', 'igw-a5f227c2']
    # 
    # select all destinationCidrBlock entries that point to '0.0.0.0/0'
    #
    let any_catchall_routes = configuration.routes[
        some destinationCidrBlock == "0.0.0.0/0"]

    when %any_catchall_routes !empty
        {
        %any_catchall_routes {
            gatewayId IN %authorised_igw
            }       
        }
}